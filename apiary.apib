FORMAT: 1A
HOST: http://payments-api-test.blim.com/

# Payments API
Payments API is a simple application allowing consumers to manipulate payment methods and transaction data.

# Group Initpoint

# Group Payment Method

## Initpoint [/initpoint/{adapter}]

### Initpoint [POST]

+ Parameters
    + adapter (enum[string]) - Payment method adapter
        + Members
            + spreedly
            + braintree
            + mercadoPago
            + third_party

+ Request (application/json)
    + Attributes (object)
        + accountId (number, required)

+ Response 200 (application/json)
    + Attributes (Base Response)
        + data
            + token: `spreedly576c24cda0fad` (string)
Missing accountId, or not setting content-type header to application/json returns the following error
+ Request (application/json)
    + Attributes (object)
+ Response 422 (application/json)
    + Attributes (Base Response)
        + headers (array)
        + data (array)
        + messages (array)
            + Invalid payload (string)
An empty accountId returns the following error
+ Request (application/json)
    + Attributes (object)
        + accountId: * (string) 
+ Response 422 (application/json)            
    + Attributes (Base Response)
        + headers (array)
        + data (array)
        + messages (array)
            + Field 'accountId' is required and cannot be empty (string) 
            
## Create [/payment-method]
Allows the consumer to create a payment method for a specific user.

### Create a Payment Method [POST]

+ Request (application/json)
    + Attributes (Payment Method Request)

+ Response 201 (application/json)
    + Attributes (Base Response)
        + headers (Payment Method Headers)
        + data (Payment Method Data)
        
+ Response 400 (application/json)
    + Attributes (Base Response)
        + messages
            + value: `Initpoint persistence error` (string)
+ Response 406 (application/json)
    + Attributes (Base Response)
        + messages 
            + value: `Invalid or expired initpoint` (string)
## Read [/payment-method/{id}]
Allows the consumer to fetch a payment method for a specific user.

### Fetch a Payment Method [GET]

+ Parameters
    + id (number) - Id of the payment method

+ Response 200 (application/json)
    + Attributes (Base Response)
        + data (Payment Method Data)

+ Response 404 (application/json)
    + Attributes (Base Response)
        + messages
            + value: Entity not found (string)

## Read [/adapter/{country}{?usedFor}]
List of payment adapter by country

### Retrieve Adapters by country [GET]
Retrieve all the payment adapters by a specific country

+ Parameters
    + country (required, string) - country ISO Alpha-2 code
    + usedFor (optional, enum[string]) - Purpose of the payment adapter
        + Members
            + `verification` - Only payment adapters used for verification
            + `subscription` - Only payment adapters used for subscription
        + Default: `verification`

+ Response 200 (application/json)
    + Attributes (Base Response)
        + data (array)
            + (object)
                + name (enum[string])
                    + Members
                        + spreadly
                        + braintree
                        + mercadoPago
                + paymentOptions (array[string])
                    + visa
                    + masterCard
                    + amex
            + (object)
                + name (enum[string])
                    + Members
                        + braintree
                        + spreadly
                        + mercadoPago
                + paymentOptions (array[string])
                    + visa
                    + masterCard
                    + amex


# Group Transaction

## Create [/transaction]
Allows the consumer to create a transaction of a certain type for a specific user.

### Create a New Transaction [POST]

+ Request (application/json)
    + Attributes (Transaction Request)

+ Response 201 (application/json)
    + Attributes (Base Response)
        + data (Transaction Data)
        
+ Response 400 (application/json)
    + Attributes (Base Response)
        + messages
            + value: `$entry is required to charge` (string)
                    
+ Response 422 (application/json)
    + Attributes (Base Response)
        + messages
            + value: `Merchant not supported for currency` (string)
            
            
## Search Transactions [/transaction{?search_limit,search_page,search_sort,amount,adapter,anyOtherTransactionProperty}] 
Allows the consumer to search transactions

### Search [GET]

+ Parameters
    + search_limit = 25 (number, optional, `10`) - The limit of transactions in the response
    + search_page = 1 (number, optional, `2`) - The page number(for pagination)
    + search_sort (enum[string], optional) - To sort results. The format is: transactionField-Order
        + Members
            + `id-ASC` - Order by id ascending
            + `adapter-DESC` - Order by adapter, descending
            + `amount` - Order by amount (by default, ASC)
    + amount (float, optional, `3.5`) - The amount of the transaction
    + adapter (string, optional, `SPREEDLY`) - The adater of the transaction
    + anyOtherTransactionProperty (string, optional) - Any valid transaction property
    
+ Response 200 (application/json)
    + Attributes (Base Response)
        + data (array)
            + (Transaction Data)
            + (Transaction Data)

## Read and Refund [/transaction/{id}]
Allows the consumer to fetch and refund a transaction.

### Fetch a Transaction [GET]
+ Parameters
    + id (number) - Id of the transaction

+ Response 200 (application/json)
    + Attributes (Base Response)
        + data (Transaction Data)

+ Response 404 (application/json)
    + Attributes (Base Response)
        + headers (array)
        + data (array)
        + messages (array)
            + value: Entity not found (string)
            
### Refund a Transaction [DELETE]
+ Parameters
    + id (number) - Id of the transaction

+ Response 200 (application/json)
    + Attributes (Base Response)
        + data (Transaction Data)

+ Response 404 (application/json)
    + Attributes (Base Response)
        + messages
            + context (string, nullable)
            + value: Entity not found (string)

# Data Structures

## Base Response (object)
+ headers (array)
+ data (array)
+ messages (array)

## Base Request (object)
+ accountId: `1` (number, required) - Account ID
+ currency (enum[string], required) - Currency ISO Code
    + Members
        + MXN - Mexican Peso
        + USD - United States Dollar
+ country (enum[string], required) - Country ISO Code
    + Members
        + MX - Mexico
        + US - United States


## Adapter Data (object)
+ name: `spreedly` (string)
+ paymentOptions (enum[string])
    + Members
        + visa - Visa
        + master - MasterCard
        + amex - American Express
        + discover - Discover
        + paypal - PayPal


## Payment Method Request (Base Request)
+ adapter (enum[string], required) - Gateway Adapter
    + Members
        + spreedly - Spreedly Adapter
        + braintree - Braintree Adapter
        + mercadoPago - Mercado Pago Adapter
        + third_party - MSO account providers
+ paymentMethodToken: `we23r` (string, required) - External Payment Method Token
+ verificationAmount: `1` (number) - Verification Amount (Optional)
+ initpoint: `spreadly576c32ffce530` (string, required)
+ additionalFields (object) (Optional)
    + ip: 127.0.0.1 (string, optional) - The ip of the user
    + email: newuser@domain.com (string, optional) - The email of the user

## Payment Method Headers (object)
+ isUnique: `true` (boolean)

## Payment Method Data (object)
+ adapter: `spreedly` (string)
+ cardExpiration: `03/20` (string)
+ cardName (string, nullable) 
+ cardNumber: `8907f9aa2b1cf1391927610874e2773fa17d`  (string)
+ cardType (string)
+ createdAt: `2016-06-20T20:56:49Z` (string)
+ createdBy (number, nullable, optional)
+ description (string, nullable, optional)
+ directDepositId (string, nullable)
+ externalCustomerId (number, nullable, optional)
+ id: `231` (number)
+ isActive: `true` (boolean)
+ modifiedAt: `2016-06-20T20:56:49Z` (string)
+ modifiedBy (number, nullable, optional)
+ name: `null` (string)
+ secureCardNumber: `555555******4444` (string)
+ state (enum[string])
    + Members
        + verified
        + pending
        + rejected
        + disabled
+ subscriber: `23456` (number)
+ tokenId: `PHd3By13LFlDTG1OxnHi7FYAbK8` (string)
+ entity: `paymentMethod` (string)


## Transaction Request (Base Request)
+ amount: `109` (number, required) - Transaction Amount
+ description: `Blim transaction` (string) - Transaction Description
+ reference: null (string, optional) - The transaction token, for now only used by MSO AccountManager API 
+ additionalFields (object) (Optional)
    + ip: 127.0.0.1 (string, optional) - The ip of the user
    + email: newuser@domain.com (string, optional) - The email of the user

## Transaction Data (object)
+ adapter: `braintree_spreedly` (string)
+ amount: `10` (number)
+ authorizationCode (string)
+ createdAt: `2016-06-20T16:07:58Z` (string)
+ createdBy (number, nullable, optional)
+ currency (number, nullable, optional)
+ currencyCode (string)
+ dateEntered: `2016-06-20T16:07:58Z` (string)
+ deleted (string, nullable)
+ description: `Blim transaction` (string)
+ externalToken (string)
+ id: `90` (number)
+ name: `Blim transaction` (string)
+ originalToken (string, nullable)
+ paymentMethod: `226` (number)
+ paymentMethodName (string)
+ paymentStatus (enum[string]) 
    + Members
        + approved
        + pending
        + refunded
        + declined
        + soft_declined
+ paymentStatusDetail (string)
+ purshaseDate `2016-06-20T16:07:58Z` (string)
+ status: `1` (string)
+ subscriber: `23456` (number)
+ subscriptionSettlementId: `0` (number)
+ subtype: `subscription` (string)
+ token: `3YakdOLVLCXwXGlvxqfgTnRPVL1` (string)
+ type: `income` (string)
+ entity: `transaction` (string)